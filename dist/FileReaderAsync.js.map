{"version":3,"sources":["../src/FileReaderAsync.js"],"names":["FileReaderAsync","r","FileReader","Object","defineProperty","configurable","readAs","dataType","file","Error","Promise","resolve","reject","readyState","EMPTY","onload","result","onerror","error","readAsText","readAsArrayBuffer","readAsBinaryString","readAsDataURL"],"mappings":";;;;;;;;;;;;;;;;;;;;;;MAAMA,e;AACJ,+BAAc;AACZ,WAAKC,CAAL,GAAS,IAAIC,UAAJ,EAAT;AACAC,MAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,GAA5B,EAAiC;AAACC,QAAAA,YAAY,EAAE;AAAf,OAAjC;AACD;;;;WAIDC,M,GAAA,gBAAOC,QAAP,EAAiBC,IAAjB,EAAuB;AAAA;;AACrB,cAAQD,QAAR;AACE,aAAK,aAAL;AACA,aAAK,MAAL;AACA,aAAK,cAAL;AACA,aAAK,SAAL;AACE;;AACF;AACE,gBAAM,IAAIE,KAAJ,CAAU,wBAAV,CAAN;AAPJ;;AASA,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;AAAA,YAChCX,CADgC,GAC3B,KAD2B,CAChCA,CADgC;;AAErC,YAAIA,CAAC,CAACY,UAAF,KAAiBX,UAAU,CAACY,KAAhC,EAAuC;AACrCF,UAAAA,MAAM,CAAC,+BAAD,CAAN;AACA;AACD;;AACDX,QAAAA,CAAC,CAACc,MAAF,GAAW,YAAK;AACdJ,UAAAA,OAAO,CAACV,CAAC,CAACe,MAAH,CAAP;AACD,SAFD;;AAGAf,QAAAA,CAAC,CAACgB,OAAF,GAAY,YAAK;AACfL,UAAAA,MAAM,CAACX,CAAC,CAACiB,KAAH,CAAN;AACD,SAFD;;AAGAjB,QAAAA,CAAC,CAAC,WAAWM,QAAZ,CAAD,CAAuBC,IAAvB;AACD,OAbM,CAAP;AAcD,K;;WACDW,U,GAAA,oBAAWX,IAAX,EAAiB;AACf,aAAO,KAAKF,MAAL,CAAY,MAAZ,EAAoBE,IAApB,CAAP;AACD,K;;WACDY,iB,GAAA,2BAAkBZ,IAAlB,EAAwB;AACtB,aAAO,KAAKF,MAAL,CAAY,aAAZ,EAA2BE,IAA3B,CAAP;AACD,K;;WACDa,kB,GAAA,4BAAmBb,IAAnB,EAAyB;AACvB,aAAO,KAAKF,MAAL,CAAY,cAAZ,EAA4BE,IAA5B,CAAP;AACD,K;;WACDc,a,GAAA,uBAAcd,IAAd,EAAoB;AAClB,aAAO,KAAKF,MAAL,CAAY,SAAZ,EAAuBE,IAAvB,CAAP;AACD,K;;;;0BAvCgB;AACf,eAAO,KAAKP,CAAL,CAAOY,UAAd;AACD;;;;;;iBAwCYb,e","sourcesContent":["class FileReaderAsync {\n  constructor() {\n    this.r = new FileReader();\n    Object.defineProperty(this, 'r', {configurable: true});\n  }\n  get readyState() {\n    return this.r.readyState;\n  }\n  readAs(dataType, file) {\n    switch (dataType) {\n      case 'ArrayBuffer':\n      case 'Text':\n      case 'BinaryString':\n      case 'DataURL':\n        break;\n      default:\n        throw new Error('Unrecognized data type');\n    }\n    return new Promise((resolve, reject)=> {\n      let {r} = this;\n      if (r.readyState !== FileReader.EMPTY) {\n        reject('The reader is already in used');\n        return;\n      }\n      r.onload = ()=> {\n        resolve(r.result);\n      };\n      r.onerror = ()=> {\n        reject(r.error);\n      };\n      r['readAs' + dataType](file);\n    });\n  }\n  readAsText(file) {\n    return this.readAs('Text', file);\n  }\n  readAsArrayBuffer(file) {\n    return this.readAs('ArrayBuffer', file);\n  }\n  readAsBinaryString(file) {\n    return this.readAs('BinaryString', file);\n  }\n  readAsDataURL(file) {\n    return this.readAs('DataURL', file);\n  }\n}\n\nexport default FileReaderAsync;\n"],"file":"FileReaderAsync.js"}