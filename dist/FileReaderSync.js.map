{"version":3,"sources":["../src/FileReaderSync.js"],"names":["FileReaderSync","Object","defineProperty","writable","configurable","value","FileReader","EMPTY","readAs","dataType","file","_s","Error","LOADING","url","xhr","text","URL","createObjectURL","XMLHttpRequest","open","overrideMimeType","send","responseText","DONE","e","revokeObjectURL","binaryToArrayBuffer","TextDecoder","decode","type","getResponseHeader","split","btoa","readAsText","readAsArrayBuffer","readAsBinaryString","readAsDataURL","binStr","len","length","arr","Uint8Array","i","charCodeAt","buffer"],"mappings":"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","sourcesContent":["class FileReaderSync {\n  constructor() {\n    Object.defineProperty(this, '_s', {writable: true, configurable: true, value: FileReader.EMPTY});\n  }\n  get readyState() {\n    return this._s;\n  }\n  readAs(dataType, file) {\n    if (this._s !== FileReader.EMPTY) {\n      throw new Error('The reader is already in used');\n    }\n    this._s = FileReader.LOADING;\n    switch (dataType) {\n      case 'ArrayBuffer':\n      case 'Text':\n      case 'BinaryString':\n      case 'DataURL':\n        break;\n      default:\n        throw new Error('Unrecognized data type');\n    }\n    let url;\n    let xhr;\n    let text;\n    try {\n      url = URL.createObjectURL(file);\n      xhr = new XMLHttpRequest();\n      xhr.open('GET', url, false);\n      xhr.overrideMimeType('text/plain; charset=x-user-defined');\n      xhr.send();\n      text = xhr.responseText;\n      this._s = FileReader.DONE;\n    } catch (e) {\n      throw new Error('Error while reading file');\n    } finally {\n      if (url)\n        URL.revokeObjectURL(url);\n    }\n    switch (dataType) {\n      case 'ArrayBuffer': {\n        return binaryToArrayBuffer(text);\n      }\n      case 'Text': {\n        return new TextDecoder().decode(binaryToArrayBuffer(text));\n      }\n      case 'BinaryString': {\n        return text;\n      }\n      case 'DataURL': {\n        let type = xhr.getResponseHeader('content-type');\n        type = type ? type.split(';')[0] : '';\n        return 'data:' + type + ';base64,' + btoa(text);\n      }\n    }\n    return null;\n  }\n  readAsText(file) {\n    return this.readAs('Text', file);\n  }\n  readAsArrayBuffer(file) {\n    return this.readAs('ArrayBuffer', file);\n  }\n  readAsBinaryString(file) {\n    return this.readAs('BinaryString', file);\n  }\n  readAsDataURL(file) {\n    return this.readAs('DataURL', file);\n  }\n}\n\nfunction binaryToArrayBuffer(binStr) {\n  let len = binStr.length;\n  let arr = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    arr[i] = binStr.charCodeAt(i);\n  }\n  return arr.buffer;\n}\n\nexport default FileReaderSync;\n"],"file":"FileReaderSync.js"}